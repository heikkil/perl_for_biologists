Exercises

1. Write a perl programme that prints out your name.

Aim: To make sure you can edit perl code with syntax highlighting, and
run it.

2.a. Write a subroutine called date() that reads the current date from
the linux date command output and returns it in what ever format you
see approriate.  Call the subroutine within the programme to show that
it works and print out the result.

Aim: Know how to manipulate data with regexps and how to call an
external command line programme. Encapsulation using a subroutine.

Note: In real world you would like to use builtin functions
localtime() and gmtime().

Do the other parts of the task 2 if you have time.

2.b. Make an other version of the subroutine to returns date in ISO
format (YYYY-MM-DD, e.g. 2007-03-22).

Hint: Use a hash to store the month names as keys and month numbers as
values.

Hint: Presise text formatting can be done with sprintf().

2.c. Make a third version of the date subroutine by making it possible
to use named arguments to select the returned format. Use a default,
so that the subroutine always returns something.




3. Write a programme that reads in a file containing an EMBL sequence
file, parses its contents line by line and prints out a FASTA
formatted text into STDOUT. Use the ar.embl file and the sequence
version as the id..

Aim: Know how to use '(<>)' construct and regular expressions to
select parts of the line and to do changes to it.

FASTA file format: The id line starting with '>' followed by one word
ID, and multi word optional description. Fields are separated by a
space character. Multiple sequence lines follow; no spaces or numbers,
no fixed line length.





4. Write a programme that takes in a sequence and splits it up into
seqments with an overlap. Use 4test_splitfasta.pl test file and
4test.fa sequence file.

Aim: Write a full blown programme in a controlled manner. First work
out a pseudocode, then create tests, start writing with a simplified
assumption, get it to work, elaborate until all the requirements of
the programme are met. Add command line options and comment your
programme using POD.



5. Write an EMBL to FASTA converter with BioPerl. Run it with file
ar.embl and compare the output to the one got in excersice 3.

Aim: Use BioPerl to solve problems.

Hint: Read Bio::SeqIO documentation using perldoc




6. Write a bioperl programme that parses a BLAST output and prints out
accession numbers to all hits with better E value than 1.  Use
t/data/a_thaliana.blastn bioperl test file to run it.

Hint: Read SearchIO HOWTO from BioPerl website.

Hint: See examples/searchio/blast_example.pl in BioPerl and remove (or
comment out) unnecessary lines.

Hint: use command line program grep to find BioPerl test files that
use Bio::SearchIO.
