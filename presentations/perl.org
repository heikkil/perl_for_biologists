#+TITLE: Perl Programming
#+AUTHOR: Heikki Lehv\auml{}slaiho
#+EMAIL:     heikki.lehvaslaiho@kaust.edu.sa
#+DATE:      2011-10-31 \\ CC BY-SA 3.0
#+DESCRIPTION:
#+KEYWORDS: UNIX, LINUX , CLI, history, summary, command line  
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]

#+BEAMER_FRAME_LEVEL: 2

#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

# TOC slide before every section
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}

## see http://deic.uab.es/~iblanes/beamer_gallery/

##+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+latex_header: \mode<beamer>{\usetheme{Antibes}}
##+latex_header: \mode<beamer>{\usecolortheme{wolverine}}
#+latex_header: \mode<beamer>{\usecolortheme{beaver}}
#+latex_header: \mode<beamer>{\usefonttheme{structurebold}}

#+latex_header: \logo{\includegraphics[width=1cm,height=1cm,keepaspectratio]{img/logo-kaust}}

# original sugestion
#\definecolor{keywords}{RGB}{255,0,90}
#\definecolor{comments}{RGB}{60,179,113}
#\definecolor{fore}{RGB}{249,242,215}
#\definecolor{back}{RGB}{51,51,51}

\definecolor{keywords}{RGB}{178,0,90}
\definecolor{comments}{RGB}{0,60,0}
\definecolor{fore}{RGB}{21,21,21}
\definecolor{back}{RGB}{211,211,211}
\lstset{
  basicstyle=\small,
  basicstyle=\color{fore},
  keywordstyle=\color{keywords},
  commentstyle=\color{comments},
  backgroundcolor=\color{back}
}


* Perl
** What is Perl
- Perl is a programming language
  - Born from a combination of C & shell scripting for system administration
  - Larry Wall's background in linguistics led to Perl borrowing ideas
    from natural languages.

- "There is more than one way to do it"

- The glue that holds the internet together.

- Oldest scripting language 
  - No separate compilation step needed
  - The line noise of the programming languages.
#+begin_src perl
  /^[^#]+\s*(?:\d+\w+\s*)[2,3]$/;
#+end_src

** Why use Perl
- Easy to learn
- Cross platform
- Very strong community support
  - CPAN, perlmonks, Perl User Groups
- Provides API to things that do not have API
- Excellent documentation
- Try:
#+begin_src sh
  man perl
#+end_src

** The Camel Book
#+begin_center
#+ATTR_LaTeX: width=0.40\textwidth 
[[file:img/camelbook.png]]
#+end_center
** Beginning Perl

- Open source book by Simon Cozens

#+begin_center
#+ATTR_LaTeX: width=0.40\textwidth
[[file:img/beginningperl.png]]
#+end_center

- Downloadable at http://www.perl.org/books/beginning-perl/ and locally

** Modern Perl

- Open source book by chromatic
#+begin_center
#+ATTR_LaTeX: width=0.30\textwidth
[[file:img/mp_cover_full.png]]
#+end_center

- Best practices of current perl (intermediate level)
- First version November 2010
- Downloadable at http://onyxneon.com/books/modern_perl/ and locally

** Perl Documentation
#+begin_src sh
  perldoc perltoc
  perldoc perlfunc
  perldoc -f open
  perldoc CGI
  perldoc Bio::PrimarySeq
#+end_src


- http://www.perl.org
- http://perldoc.perl.org/	
- http://perl-begin.org/
- http://learn.perl.org/
- http://www.cpan.org/	
- http://perlmonks.org/


** Online tutorials

- http://learnperl.scratchcomputing.com/
  - short introductions
- http://perltraining.com.au/notes.html
  - material for several week long courses
- http://www.modernperlbooks.com/mt/2011/09/how-to-learn-perl.html
  - guidelines for learning from cromatic
- http://www.perl-begin.org/tutorials/impatient-perl/iperl.html
  - thorough coverage for the impatient

** Programming Perl

- Best practices
- Aimed at Perl 5.14.2.
- Shortcuts (idoms)
- Code re-use
- Maintainable development
- Shortest path between two points

** Perl program structure

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
- shebang #!
  + /usr/bin/env perl
- directives (use)
- keywords 
- functions
- statements ;
- white space
- comments

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_col: 0.5
    :BEAMER_env: ignoreheading
    :END:

#+begin_src sh
> cat hello.pl
#+end_src


#+begin_src perl
#!/usr/bin/env perl
# example1_hello.pl
use Modern::Perl;
say "Hello!";
#+end_src

#+begin_src sh
> chmod 755 hello.pl
> hello.pl
Hello!
>
#+end_src

* Perl variables

** Variable types
- Scalars - Start with a $
  - Strings, integers, floating point numbers, references to other variables
- Arrays - start with a @
  - Zero based index
  - Contain an ordered list of scalars
- Hashes - start with %
  - Associative arrays without order
  - key => value

** Scalars


*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
- Any single value
- Automatic type casting
- String interpolation
  - Only in double quoted strings
- In Perl, context is everything!

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_col: 0.5
    :BEAMER_env: ignoreheading
    :END:

#+begin_src perl
#!/usr/bin/env perl
# example2_sum/sum.pl
use Modern::Perl;

print "Give a number: ";
my $num = <STDIN>;

my $num2 = '0.5';
my $float = $num + $num2;

# print the sum
my $res = 'Sum';
print "$res is $float\n";
#+end_src

** Pragmas

- \texttt{use Modern::Perl;}
  - Recommended, declares both below
  - Also gives function \texttt{say}
- \texttt{use strict;}
  - Forces variable declaration
  - Needed for maintainable code
  - Scoping
  - Garbage collection
- \texttt{use warnings;}
  - Alerts on uninitialized variables
  - Warns on deprecated syntax
  - Useful for sanity checking
  - In desperate situations: \texttt{no warnings;}

** undef

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
- Q: What is the value of a variable if the value has not been assigned?
\pause
- A:  \texttt{undef}, meaning not defined, void
  - \texttt{use warnings} will warn if you try to access undefined variables

#+begin_src sh
Use of uninitialized \
value $num in say at \
./undef.pl line 7.
#+end_src

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
#+begin_src perl
#!/usr/bin/env perl
# example3_undef/undef.pl
use Modern::Perl;

my $num;
# print
say $num;
#+end_src

** Operators


| *Function*        | *String*    | *Numeric*    |
|-------------------+-------------+--------------|
| Assignment        | $=$         | $=$          |
| Equality          | eq, ne      | $==$, $!=$   |
| Comparison        | lt,le,gt,ge | <, <=, >, >= |
| Concatenation     | .           | n/a          |
| Repetition        | x           | n/a          |
| Basic Math        | n/a         | +,-,*,/      |
| Modulus, Exponent | n/a         | %,^          |
| Sorting           | cmp         | <=>          |

** Operators

- normal matematical precedence
- operators force the context on variables!
- More:
  - boolean operators ( and, &&, or, || )
  - operating and assinging at once ($a $+=$ $b;)
  - autoincrement and autodecrement ($count++, ++$c;)

** Working with strings
*** [#B] list					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:

- "$string" '$literals'
  - single quotes: verbatim
  - variable interpolation
- Operators:
  + concatenation .
  + repetition x
- join()
- chomp()
- length()
- substr() - replace!
- HERE documents
*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
#+begin_src perl
my $a = "$b". '$c'. 'pl';
my $s = join ',', @list;
my $sep =  '-' x 40;
say length $seq ;
my $last = 
    substr $a, -1, 1;
$ml = <<HERE
This is a $adj
multi line
HERE
print $ml; 
#+end_src
** Working with numbers
*** [#B] list					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:

- abs() - absolute value
- sqrt()- positive square root
  + see Math::Complex
- exp(), log()
- rand() - pseudo rnd number
- (trigonometry)
- int() - integer part
- printf(), sprintf()
  + perldoc -f sprintf
- oct(), hex()

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:
#+begin_src perl
  my $rounded = int($float+0.5);
  $a=2.66666;
  printf "%.2f\n", $a;  # 2.67
  printf "%+.2f\n", $a; #+2.67

#+end_src

** Array

- Implements stacks, lists, queues

#+begin_src perl
   @a = ();         # literal empty list
   @b= qw(a t c g); # white space limited list
   push @b, 'u'; $first = shift @b; # functions
#+end_src
#+begin_center
file:img/array.pdf
#+end_center

** Working with arrays

*** [#B] list					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
- Special variable $#alph,  index of last element
- Special variable $_
- split() and join(), foreach()
- Enclosure
- Scalar context gives array length
- Access array elements as scalars
- Note the sigill shift: @ -> $

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:
#+begin_src perl
#!/usr/bin/env perl
# example4_counting/counting.pl
use Modern::Perl;
my $alph = 'atgc';
say length($alph);
my @alph = split '', $alph;
print "$#alph\n";
print scalar(@alph), "\n";
my $c = 0;
foreach (@alph) {
    say "$c: ", $alph[$c], $_;
    $c++;
    my $alph = 'augc';
}
say "$alph: $c";
#+end_src

** Working with arrays: output
*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
#+begin_src perl
> counting.pl
4
3
4
0: aa
1: tt
2: gg
3: cc
atgc: 4 
#+end_src

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:
#+begin_src perl
#!/usr/bin/env perl
# example4_counting/counting.pl
use Modern::Perl;
my $alph = 'atgc';
say length($alph);
my @alph = split '', $alph;
print "$#alph\n";
print scalar(@alph), "\n";
my $c = 0;
foreach (@alph) {
    say "$c: ", $alph[$c], $_;
    $c++;
    my $alph = 'augc';
}
say "$alph: $c";
#+end_src

** Working with arrays

- Ranges, an easy way to generate lists:
#+begin_src perl
  (1 .. 6), ( 8 .. -2 ), ('a' .. 'z')
#+end_src

- Can be used as slices
#+begin_src perl
  @three = reverse sort @months[ -1..1 ];
#+end_src

- Months with 31 days:
#+begin_src perl
  @months[0,3,5, 7-8, 9, 11]
#+end_src

- Swapping values without intermediate variables:
#+begin_src perl
  ($x, $y) = ($x, $y);
#+end_src

** Perl built in functions

- List of functions by category: 

#+begin_src sh
  perldoc perl 
#+end_src

- Usage of a function:

#+begin_src sh
  perldoc -f <function_name>
#+end_src

** Hashes

- Special Initialization:
#+begin_src perl
  my %hash = ( key1 => 'value1' );
#+end_src
  - Could be written \texttt{( 'key1', 'value1', 'key2', 'value2', ... )}
- Hash keys are unique!
- Access scalar elements inside hashes like this:
#+begin_src perl
  my $value = $hash{key};
#+end_src
- Hashes auto-vivify!
#+begin_src perl
  # create an entry with key test1;
  $hash{test1} = 'value';
#+end_src
- When you use hashes all the time, you have mastered perl!
  - (hash references are even better, but we'll talk about them later)

** Hash functions

#+begin_src perl
my $is_there = exists $hash{key};
#+end_src
- Returns 1 if the key exists, undef if not.
- Does not auto-vivify.

#+begin_src perl
my $has_value = defined $hash{key};
#+end_src
- Return 1 if the key has value, undef if not

#+begin_src perl
my @list = keys %hash;
#+end_src
- Returns a list of the keys in the hash

#+begin_src perl
my @list = values %hash;
#+end_src
- Returns a list of the values in the hash

** Default variables

- $_ - the "default scalar"
  - for example, \texttt{chomp()} and \texttt{print()} work on default
    scalar if no argument is given

- @\_ & @ARGV - the "default arrays"
  - Subroutines use @\_ as default
  - Outside of a subroutine, @ARGV is the default array, only used for
    command line input

* Flow control

** Control structures

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:

- *Loops and decisions*
- for, foreach
- if, elsif, else
- while
- "if not" equals "unless"

- transposition helps 
- readability

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:

#+begin_src perl
if (<some test>) {
    # do
} elsif (<other test>) {
    # do
} else {
    # do
}
$a = 5;
while ($a>0) {
    # do
    $a--;
}
unless ($valid) {
    check($value)
}
check($value) unless $valid;
#+end_src

** What is boolean in Perl

- There is no separate boolean variable
- Anything can be tested
  - An empty string is false
  - Number 0 and string "0" are false
  - An empty list () is false
  - Undefined value, undef, is false
  - *Everything else is true*

** Pseudocode

- Near English (or any natural language) explanation what code does,
  written before writing the code

- Keep elaborating and adding programme code like elements until it is
  easy to implement.

- Example: How to count from 10 to zero in even numbers:

#+begin_center
\texttt{  start from 10, remove 2, keep repeating until 0}
#+end_center

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:

#+begin_src perl
start from 10,
keep repeating until 0
  print value
  remove 2
done
#+end_src

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:

#+begin_src perl
x = 10;
until ($x < 0) {
	say $x;
	$x -= 2;
}
#+end_src

** Subroutines

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
- Create your own verbs
- Prototypes and predeclarations of subroutines can be used
- Lexical scoping
- Shift works on @\_
- Last statement is returned
- Note: You can not pass two arrays, they are flattened into one!

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:

#+begin_src perl
sub version; #sum_sub.pl
say 'version';
say version;

sub add1 {
    my $one = shift;
    my $two = shift; 	
    my $sum = $one + $two;
    return $sum;}
# no space btw dollar signs!
sub add ($ $) {
    shift() + shift();}
my $sum = add1(2,3);
$sum = add 2, 3;
sub version {'1.0'};
#+end_src

** Long arguments for subroutines

If you have more than two arguments often, you might want to use
  hashes to pass arguments to subroutines:

#+begin_src perl
sub add2 { # sub_sub2.pl
    my %args = @_;
    my $one = $args{one} || 0;
    my $two = $args{two} || 0;
    my $sum = $one +$two;
    return $sum; }

sub add ($$) {
    shift() + shift(); }

my $sum2 = add2(one => 2,
                two => 3);
my $sum = add 2,3;
#+end_src

** References

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:

- Reference is a scalar variable pointer to some other, often more
  complex, structure.

- It does not have to a named structure

- References make it possible to create complex structures:
  + hashes of hashes,
  + hashes of arrays, ...

- \texttt{ref()} tells what is the referenced structure

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
#+begin_src perl
@lower = ('a' .. 'z');
$myletters = \@lower;
push @$myletters, '-';
$upper = \('A' .. 'Z');
${$all}{'upper'} = $upper;
$all->{'lower'} = \@lower;
$matrix[0][5] = 3;

# using ref()
ref \$a; #returns SCALAR
ref \@a; #returns ARRAY
ref \%a; #returns HASH
#+end_src

** Subroutines revisited

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.3
    :END:
  - passing more compex arguments as references
  - ? : operator
*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.7
    :END:

#+begin_src perl
sub first_is_longer { #longer.pl
    my ($lref1, $lref2) = @_;

    my $first = @$lref1; #length
    my $sec = @$lref2; # length
    ($first > $sec) ? 1 : 0;
}
#+end_src

* Working with files

** Reading and Writing a file
- The easy way:
  - Use the \texttt{while (<>){ }} construct
- Redirect the output from command line into a file

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.7
    :END:

#+begin_src perl
# the most useful perl construct
while (<>) {
     # do something
}
#+end_src


#+begin_src perl
# same as:
> perl -ne '#do something'
# redirection
> perl -ne '#do something' > file
#+end_src

** Filehandles, the old way

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.3
    :END:

- Default filehandle is STDOUT
- $! special variable holds error messages
- perldoc -f -x
- perldoc -f open

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.7
    :END:
#+begin_src perl
print "Hello\n"; # file1.pl
print STDOUT "Hello\n"; # identical
my $file = 'seq.embl';
die "Not exist" unless -e $file;
die "Not readable" unless -r $file;
open FH, $file or die $!;
while (<FH>) { chomp; say;}
#+end_src

** Filehandles, the modern way

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.3
    :END:

- The three argument form is preferred
  - gives lexical scope to filehandles
- die automatically
- $/  'input record separator'
  - defaults to \texttt{\\ n}
# error \, how to produce

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.7
    :END:
#+begin_src perl
 # file2.pl
use autodie; # test with Try::Tiny

{
  open my $F, '>', $file;
  while (<$F>) { chomp; say $_; }
}
#+end_src

** Reading and Writing a file

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.3
    :END:

- Permanent record of program execution
- Read file one EMBL seq entry at a time
  - Modify $/ in a closure or subroutine
  - Only use for *local* you'll see!

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.7
    :END:
#+begin_src perl
# file2.pl
use autodie;
die "Not writable" unless -w $file;
open my $LOG, '>>', $file;
say STDERR "log: $params";
say $LOG $params;

{
  local $/ = "\/\/\n";
  open my $SEQ, '<', shift;
  while (<$SEQ>) {
    my $seq = $_; 
    my ($ac) = $seq =~ /AC +(\w+)/;  
    say $ac if $seq =~ /FT +CDS/;
  }
}
#+end_src

** External program execution
- exec()
  + limited use as it does not return anything to perl
- system() 
  + forks a new process first
  + returns the exit status
- *`backtics`* 
  + strictly speaking it is a operator
  + returns STDOUT of called cmdline
#+begin_src perl
  my $date = `date`; chomp $date;
#+end_src
- pipes
  + pipes cmdline output to filehandle
#+begin_src perl
  use autodie;
  open $FH, 'zcat file.gz|';
#+end_src
   

* Regular expressions

** Regular expressions

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
- used for finding patterns in
  - free text
  - semi-structured text (database parsing)
  - sequences (ProSite)
- consists of 
  - literals
  - metacharacters

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.7
    :END:
#+begin_src perl
/even/; # literal
/eve+n/; # + means one or more e
/eve*n/; # * means zero or more e
/eve?n/; # ? means zero or one e
/e(ve)+n/ # group
/0|1|2|3|4|5|6|7|8|9/ # alteration
/[0123456789]/ # character class
/[0-9]/ # range, in ASCII
/e[ve]+n/ # character class
/\d/  # character class
#+end_src

** Help on Regex

- perldoc:
  - perlrequick		Perl regular expressions quick start
  - perlretut		Perl regular expressions tutorial
  - perlre		Perl regular expressions, the rest of the story
  - perlrebackslash	Perl regular expression backslash sequences
  - perlrecharclass	Perl regular expression character classes
  - perlreref		Perl regular expressions quick reference

** Regex shorthands
- Always use the shortest form for clarity
- What does /p*/ match? \pause
  - It always matches!
- Exact number of repetitions

#+begin_src perl
  # P loop, nucleotide binding 
  # (AG)XXXXGK(ST), PROSITE
  /[AG]X{4}GK[ST]/; # perl
#+end_src

** Regex anchors and operators
*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.3
    :END:

- Anchoring the match to a border
- Regex works on $_
- Regexp operators tell regexps 
  to bind to other strings
 - =~
 - !~
*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.7
    :END:
#test usege without $line
#+begin_src perl
/^  \w+/ # ^ forces line start
/\d$/ # $ forces line end
/\bword\b/ # word boundary

if (/\w/) { # word_char.pl
    my $line = $_;
    # check for a  digit
    say "digit" if $line =~ /\d/;
    # should start with ID
    say "ID error: $line"
        if $line !~ /ID/;
}
#+end_src

** String manipulations with regexs
*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:

- contents of parenthesis is remembered
- fancier version of \testtt{split()}
- explicit m allows use of any delimiter
- regexp operators:
  + match m//
  + substitution s///
  + translate t///
    + returns number of translations
    + useful for counting
*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:
#+begin_src perl
/^  (\w+)(.+)/;
my first_word = $1;
my $rest = $2; # or
my ($first_word, $rest)
     = /^  (\w+)(.+)/;
# two words limited by '\'
/\w+\\\w+/;
m|\w+\\w+|;
s/[Uu]/t/;
# add quotes
s/(\w+)/"$1"/; 
$count = tr/[AT]/N/; 
#+end_src

** Regex modifiers and greedyness

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
- Modifiers
  - g - global
  - i - case insensitive
- Greedy by default
  - "Always match all you can"
  - Lazy (non-greedy) matching by adding ? to repetition
*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:
#+begin_src perl
 # quotes around every word 
s/(\w+)/"$1"/g;

# last word character
/.+(w+)/;
# first whole word
/.+? (w+)/;
#+end_src

* Real world programming - errors and all

** Catching errors

- eval
  + traps run time errors
  + error message stored in special
    variable $@
  + semicolon at the end of the 
    eval block is required
- Try::Tiny is better


*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.3
    :END:
#+begin_src perl
$a = 0;
eval {
    $b = 5/$a;
};
warn $@ if $@; 
#+end_src
*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.3
    :END:
#+begin_src perl
use Try::Tiny;
$a = 0;
try {
    $b = 5/$a;
} catch {
    warn $_;
};
#+end_src

** Calling external progammes

#+begin_src perl

system("ls");

# to catch the output use backtics
$files =  `ls -1`;
#+end_src

** Debugging perl

- print statements
  - make them depend on global variable $DEBUG
  - use Data::Dumper or Data::Printer for complex structures

#+begin_src perl
   our $DEBUG = 1;
   print $x if $DEBUG;
   print $y if $DEBUG;
#+end_src

- Perl command line debugger

#+begin_src sh
   perl -d prog.pl
#+end_src

- A la bash -x switch using Devel::Trace

#+begin_src sh
   perl -d:Trace prog.pl
#+end_src

- Graphical debugger Devel::ptkdb
  - depends on Tk graphics library (perl module)

#+begin_src sh
   perl -d:ptkdb prog.pl
#+end_src

** Running perl

#+begin_src perl
perldoc perrun
perldoc perldebug
#+end_src

- Chapter 9 in Beginning Perl
- Command line perl
- You should have learned it by now by example!

** Modules
- Logical organisation of code
- Code reuse
- @INC -- paths where Perl looks for modules
- (do) -- call subroutines from an other file
- require -- runtime include of a file or module
  - allows testing and graceful failure
- use
  - compile time include
  - 'use'ing a perl module makes object oriented interface available
    and usually exports common functions

** Getopt::Long

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.25
    :END:
- a standard library
- used to set short *and* long options from command line
- $0, name of the calling programme


*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.8
    :END:

#+begin_src perl
use Getopt::Long;
use constant PROGR_NAME => 'optlong.pl';
use constant VERSION => '0.1';
our $DEBUG = '';
our $DIR = '.';
GetOptions
  ('v|version'  => 
    sub{print PROGR_NAME, ", version ",
        VERSION, "\n"; exit 1; },
   'd|directory:s'=> \$DIR,
   'g|debug'      => \$DEBUG,
   'h|help|?'     => 
   sub{exec('perldoc',$0); exit 0} 
  );
#+end_src


** Plain Old Documentation

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:

- POD: embedded structured comments in code
- *Empty* lines separate commands
- Three types of text:
  1. Ordinary paragraphs
    - Formatting codes
  2. Verbatim paragraphs
    - Indented
  3. Command paragraphs
    - See code 

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
#+begin_src perl
# compressed vertically!
=pod
=head1 HEADING TEXT

Text in B<bold> I<italic>

=head2 Heading Text
=over indentlevel
=item stuff
=back
=begin format
=end format
=cut
#+end_src

** POD tools
- pod2html   pod2latex  pod2man    pod2text   pod2usage, podchecker
- use POD to create self-documenting programs
#+begin_src perl
  exec('perldoc',$0); exit;
#+end_src
- Top level headers for a program:
  - NAME, SYNOPSIS, DESCRIPTION (INSTALLING, RUNNING, OPTIONS), VERSION, TODO, BUGS, AUTHOR, CONTRIBUTORS, LICENSE, (SUBROUTINES)
- Use inline documentation always when you can

* Code reuse and CPAN

** Code reuse
- Try not to reinvent the wheel
- CPAN Authors usually QA their code
- The community reviews CPAN Modules
- Always look for a module *first*
- Chances are, it's been done faster and more securely than you could
  do it by yourself
- It saves time
- You might be able to do it better, but is it worth it?

** Some Modules (I)

- *Getopt::Long* for command line parsing
- *Carp* provides more intelligent designs for error/warning messages
- *Data::Dumper* for debugging (standard module)
  - *Data::Printer* is modern alternative
- *CGI & CGI::Pretty* provide an interface to the CGI Environment
  - *CGI::Application*
- *DBI* provides a unified interface to relational databases
- *DateTime* for date interfaces, also DateTime::Format::DateManip

** Some Modules (II)
- *LWP::Simple* and *LWP::UserAgent* interfaces to libwww-perl
- *WWW::Mechanize* for web screen scraping
- *HTML::TreeBuilder* for HTML parsing
- *MIME::Lite* for constructing email message with or without attachments
- *Spreadsheet::ParseExcel* to read in Excel Spreadsheets
- *Spreadsheet::WriteExcel* to create spreadsheets in perl
  - being replaced by *Excel::Writer::XLSX*
- *XML::Twig* for manupulating XML data
- *XML::Simple* for reading and writing simple XML
- *PDL*, Perl Data Language, fast matrix and math

** Perl Resources

- http://www.cpan.org/	
- http://search.cpan.org/	

** Installing from CPAN

- Use your distro's package manager to install most -- and especialy complex modules.
- E.g. \texttt{sudo apt-get install GD} -- graphics library
- First configure CPAN:
  - \texttt{o conf init} at cpan prompt 
- Sets closest mirrors and finds helper programs

- cpanm - App:cpanminus
  + modern installer of choice

** What is new in perl

 - Modern::Perl
 - Perl5i
 - Mo, Moo, Moose
 - Plack/PSGI middle-ware; Dancer,  Mojolicious
 - CPAN book draft: http://camelo.perl-hackers.net/~ambs/
 - Modern Perl book v2 any day now
 - Task::Kensho - recommended modules

** Best Practices

- Code in paragraphs
  + header is a comment line
- Throw exceptions
  + die()
  + Try::Tiny
- Avoid confusing idoms and cleverness
- Perl::Critic
  + Contains complete 'Perl Best Practices' book text
- Perl::Tidy 
- Write tests

   http://www.slideshare.net/kaokun/introduction-to-writing-readable-and-maintainable-perl

* Object oriented programming

** Object Oriented programming (OOP) concepts
- class
  + Description of data and methods (Bio::PrimarySeq)
- method
  + way to access data (Bio::PrimarySeq::seq())
- object
  + instance of a class (my $seq = Bio::PrimarySeq->new)
- inheritance
  + way to create classes that enhance other classes (Bio::PrimarySeq
    -> Bio::Seq)

** Objects in Perl

- An object is simply a reference that happens to know which class it
  belongs to.

- A class is simply a package that happens to provide methods to deal
  with object references.

- A method is simply a subroutine that expects an object reference (or
  a package name, for class methods) as the first argument.

** Inheritance

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
- Objects inherit methods from their parent 
- They inherit state (data members); not explicitly in Perl. 
- Methods can be overridden by children 

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
[[file:img/puzzle_inherit.pdf]]

** Interfaces

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:
- Interfaces can be thought of as an agreement 
- Object will at least look  a certain way 
- It is independent of what goes on under the hood 

*** list 					      :B_ignoreheading:BMCOL:
    :PROPERTIES: 
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.2
    :END:
    [[file:img/puzzle_interface.pdf]]

** Interfaces and Inheritance in Bioperl
- What you need to know: 
  + Interfaces are declared with trailing 'I' (Bio::PrimarySeqI) 
  + Can be assured that at least these methods will be implemented by
    subclasses
  + Can treat all inheriting objects as if they were the same,
    i.e. Bio::PrimarySeq, Bio::Seq, Bio::Seq::RichSeq all have basic
    Bio::PrimarySeqI methods.
- In Perl, good OO requires good manners. 
- Methods which start with an underscore are considered 'private' 
- Watch out. Perl programmers can cheat. 

** Modular programming (I) DBrowser

#+begin_center

#+ATTR_LaTeX: width=0.80\textwidth
[[file:img/modular_programming.png]]

#+end_center
From Stein et al. Genome Research 2002

** Modular programming (II) Bio::DB

#+begin_center

#+ATTR_LaTeX: width=0.90\textwidth
[[file:img/bio_db.pdf]]

#+end_center

