
* Install fresh perl

curl -L http://xrl.us/installperlosx | bash


  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  2239  100  2239    0     0    143      0  0:00:15  0:00:15 --:--:--  7589
Checking for .bash_profile... NOT FOUND
Creating /Users/heikki/.bash_profile
Installing perlbrew
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1157  100  1157    0     0    276      0  0:00:04  0:00:04 --:--:--  4017

## Download the latest perlbrew
## Download the packed patchperl

## Installing perlbrew
The perlbrew is installed as:

    ~/perl5/perlbrew/bin/perlbrew

You may trash the downloaded /private/var/folders/b8/971cb03n2gl3cx5yrz11btpc0000gs/T/perlbrew from now on.

Perlbrew environment initiated, required directories are created under

    ~/perl5/perlbrew

Paste the following line(s) to the end of your ~/.bashrc and start a
new shell, perlbrew should be up and fully functional from there:

    source ~/perl5/perlbrew/etc/bashrc

For further instructions, simply run `perlbrew` to see the help message.

Enjoy perlbrew at $HOME!!
## Installing patchperl

## Done.
Checking/updating /Users/heikki/.bashrc to source perlbrew bashrc
Updating your current environment
Installing Perl 5.14.0 through perlbrew
Fetching perl-5.14.0 as /Users/heikki/perl5/perlbrew/dists/perl-5.14.0.tar.gz
Installing /Users/heikki/perl5/perlbrew/build/perl-5.14.0 into ~/perl5/perlbrew/perls/perl-5.14.0

This could take a while. You can run the following command on another shell to track the status:

  tail -f ~/perl5/perlbrew/build.log



Installing /Users/heikki/perl5/perlbrew/build/perl-5.14.0 failed. See /Users/heikki/perl5/perlbrew/build.log to see why.
If you want to force install the distribution, try:

  perlbrew --force install perl-5.14.0

Setting Perl 5.14.0 to default
perl-5.14.0 is not installed
Installing cpanm,
------------------
Install complete - close this terminal window and open a new one,
then to confirm Perl 5.14.0 is installed type: perl -v


 log our, log in


 perlbrew --force install perl-5.14.0

perlbrew switch perl-5.14.0
cpanm Try::Tiny

3jane:~ heikki$ cpanm Test::More
Test::More is up to date. (0.98)
3jane:~ heikki$ cpanm Modern::Perl;
--> Working on Modern::Perl
Fetching http://search.cpan.org/CPAN/authors/id/C/CH/CHROMATIC/Modern-Perl-1.03.tar.gz ... OK
Configuring Modern-Perl-1.03 ... OK
Building and testing Modern-Perl-1.03 ... OK
Successfully installed Modern-Perl-1.03
1 distribution installed
3jane:~ heikki$ pwd
/Users/heikki
3jane:~ heikki$ cat > hello.pl
#!/usr/bin/env perl
use Modern::Perl;
say "Hello!";  
3jane:~ heikki$ chmod 755  hello.pl
3jane:~ heikki$ ./hello.pl 
Hello!
3jane:~ heikki$ 


Test::Tutorial
Test::Simple
Test::More

--------- hello.pl-----------------------
#!/usr/bin/env perl
use Modern::Perl;
say "Hello!";


--------- hello.t-----------------------
use Test::Simple tests => 1;
ok( `./hello.pl` eq "Hello!\n", "output" );
* Windows

http://strawberryperl.com/

* Inspiration

How to Learn Perl
http://www.modernperlbooks.com/mt/2011/09/how-to-learn-perl.html


http://www.perl-begin.org/tutorials/impatient-perl/iperl.html


* More on software development:

  - Learn the idoms of the language
  - Use IDE to code (e.g. vim, Emacs, Padre, Eclipse)
  - Use logical directory structure for your code
  - Refactoring and code reuse
  - Write (inline) documentation
  - Write README telling what the programme is *supposed* to be doing
  - List dependencies and how to install your programme
  - Version control system:
    + commit logical units
    + tag releases, document changes
    + only one set of unique files at any stage
  - Include the license statement
  - Get feedback on best practices. Share. Code review!


* git 

http://think-like-a-git.net/

* tips

- Module::Corelist (corelist)
- App::TimeTracker http://timetracker.plix.at/

* Sites

from:
http://www.modernperlbooks.com/mt/2011/09/how-to-learn-perl.html

find:

http://perl-begin.org/
http://learnperl.scratchcomputing.com/

Modern perl screen casts
http://www.youtube.com/user/gabor529

* http://perltraining.com.au/notes.html

* Padre

Requires perl compiled with threads

http://nxadm.wordpress.com/2010/12/10/get-the-latest-perl-release-with-perlbrew/

try later

* Modern projects

Already in 2005 “modern” applications and distributions started
appearing in CPAN to complement core Perl: 
- PPI (2005), 
- Perl::Critic (2005), 
- Catalyst (2005), 
- DBIx::Class (2005), 
- Moose (2006), 
- Strawberry Perl (2006), 
- local::lib (2007), 
- Padre (2008), 
- Dancer (2009), 
- (2009), 
- perlbrew (2010), 
- cpanminus (2010), etc.
 (And my excuses for the many modern projects I forgot to include.)

marpa
Regexp::Grammars
carton
Ubic
* things to cover
  CLOCK: [2011-11-08 Tue 08:27]
  :PROPERTIES:
  :ORDERED:  t
  :END:
MRS::Client

task: split fasta file based on header information

task: create pseudo code and code for simple task

possibility: ssh-copy-id

Chart::Strip - Draw strip chart type graphs.
 
http://perl-tutorial.org/

App::TimeTracker
http://timetracker.plix.at/

http://johnwang.com/explaining-why-moose-is-awesome-the-direct-way/
Why: Moose makes Perl more Maintainable than Other Languages
How: Moose adds Static Typing to Getters and Setters
Bonus: Moose Eliminates Write Once Code


* Impatient perl
iperl.pdf

** string

- string literals
  - single quotes: verbatim
  - variable interpolation
- chomp
- concatenation: period
- repetition
- length
- substr
- split/join
- qw (a b);
- HERE documents

** numbers

- abs
- int
- sqrt
- exp, log
- rand
- sprintf
- oct, hex

- flow control precedence (|| versus or )
- conditional operator 
  - my $res = $boolean ? $value1 : $value2

- more practicals on scalars and scalar functions

** references and file handles

** arrays

- for(each)
- scalar
- push
- pop
- shift
- unshift
- sort
- reverse
- splice

* hashes

- exists
- delete
- keys
- values
- each

* references

- way to complex structures
- since arrays and hashes can store only scalars, you need a scalar to
  point to it. That is a reference.
- function ref()
- autovivification
- can not print, use Data::Dumper or YAML

* Packages, name spaces and lexical scoping

- package defines a name space
- our: package variables ("global")
- my : lexical variables
- blocks of code
- garbage collection


- procedural versus OO 
- "perl, do this to a variable"
  -- function acts on a variable
- object, do this to yourself
  -- object has a method to do something

- Class is a package the returns a blessed construct (hash)
  - it needs a constructor
  - and other methods that act on  data


- POD
- command line arguments
- file input and output
- file tests
- glob() - shell style filename


* Regular expressions

1. match default or m
2. substute  s
3. tranliterate tr or y

scalar binding

1. =~  match
2. !~ not match

- wild cards, metacharacters
- capturing parentheses
- greedy vs thrifty quantifiers
- position anchors
- modifiers , 'perldoc perlre'
  -
* core perl

** Perl releases
- annual major release
  - Production releases with even numbers
    + 5.10 (2011), 5.12 (2010), 5.14 (2011), 5.16
  - Development releases with odd numbers
    + 5.15, ...
- minor releases when needed

*** Perl 5.10
- defined or operator //
- built-in switch statement

  my $a = '';
  given ($codon) {
     when (/ATG/) {$a = 'M; '}
     when (/TAA/) {$a = '*'; }
     default {$a = 'N'}

- smart matching ~~
  + perldoc perlsyn
- say()
- lexical default variable: my $_
- stacked file tests: e.g. -f -w -x $file
- regexp improvements
  - named capture buffers /(?<name>)/; say $+{name}
- some features off by default: use Modern::Perl; perl -E 'say "a"'


*** Perl 5.12
- package takes version: package MyParser 0.1
- yada-yada operator ...
  + compiles, throws unimplemented exeption when run
- automatics 'use strict;' when 'use 5.12.0'
- parent instead of base
- autodie

*** Perl 5.14
- nodestructuve substitution (r)
  + s///r and tr///r act on copy
  + $new = s/a/b/r; # $_ still has a
- CPAN meta modules
- HTTP::Tiny - http client
* other resources
http://www.people.vcu.edu/~elhaij/IntroBioinf/Notes/

* moodle course

bala ~/old/home/heikki/w/perl

* Command line options:

*Getopt::Long*, heavily used *App::Options* a few years ago, now
settling with my own module. Recently there have been some new
development efforts like *MooseX::GetOpt*, *Moo::Getopt*, and *App::Rad*.

Path::Class::Rule

