
#+TITLE:  Read FASTA sequence file 

* Task
Again, take the sample solution file from the previous task, this time
from http://baloo-dev.cbrc.kaust.edu.sa/live/05_files/file_sub.pl ,
and modify it to read the data from a file containing sequences in
FASTA format. Use regular expressions to read in the ID, the
description and the sequence into variables.

The FASTA file is at
http://baloo-dev.cbrc.kaust.edu.sa/live/06_regular_expressions/seq.fasta

Hint: start the code block reading the file contents with line "local
$/ = '>'". The first string that you read in will not have a sequence
since '>' is the first character of the file.

* Sample solutions


The first solution reads the FASTA file one line at the time. It leads
to a relatively complicated programme logic.

#+HEADERS: :results output :exports both :shebang "#!/usr/bin/env perl"
#+BEGIN_SRC perl :tangle read_fasta.pl
  #!/usr/bin/env perl
  
  use v5.10;
  use strict;
  use warnings;
  use autodie;
  use Data::Dumper; # Data::Printer 
  my $DEBUG = 1;
  
  # unused subroutined do not trigger warnings
  sub parse_line {
      my $line = shift;
      #say;
      my ($id, $descr, $seq) = split "\t", $line;
      say "($id, $descr, $seq)" if $DEBUG;
      
      # building  a hash 
      
      my %this_seq;
      $this_seq{id} = $id;
      $this_seq{descr} = $descr;
      $this_seq{seq} = $seq;
      print Dumper \%this_seq;
  
      # returning a reference to this hash
      return \%this_seq;
  }
  
  
  sub parse_idline {
      my $line = shift;
      my ($id, $descr) = $line =~ /^>(\w+) (.+);/;
      my %this_seq;
      $this_seq{id} = $id;
      $this_seq{descr} = $descr;
      return \%this_seq;
  }
  
  sub read_file {
      my $file = shift;
      # create the data structure to hold sequence information
      my $seqs;
      # open the file
      open my $F, "<", $file;
      my $new_seq;
      while (<$F>) {
          chomp;
          if (/^>/) {
              $seqs->{$new_seq->{id}} = $new_seq if $new_seq;
              $new_seq = parse_idline($_);
          } else { # sequence line!
              $new_seq->{seq} .= $_;
          }
      }
      $seqs->{$new_seq->{id}} = $new_seq if $new_seq;
      print Dumper $seqs;
      return $seqs;
  }
  
  
  # main part of the programme
  my $file = 'seq.fasta';
  my $seqs = read_file($file);
  
  # call information from the data structure
  say $seqs->{A7A179}->{descr};
  say $seqs->{A7A179}->{seq};
  
#+END_SRC

#+RESULTS:
#+begin_example
$VAR1 = {
          'A7A179' => {
                        'id' => 'A7A179',
                        'seq' => 'MPITQIISASDSEAGPKPSISLVPDKPSEPETSPRHHRLSRSLSKFKRWRGRSNSSLSMGSSEQQELQDSPNEARSDDDENGYNNDNADDLAKSKYMMKSIAGLLTTASVYAGMNNAQEMNVLSQVDSEESDSSDSFQENIGQNEVKSKKENLKTKSHPEVPRLDKRKPTLFDFSITREKLSKDNVAKLRQRFCLDEQEPFLNDFPAWLLKDVLVQGHIFITTKHFLFFAYLPKNPRSVKMSGNLNIRTKLIRSTRYWCVLKNHLFSMYTSSTELYFPVLTIDLREVQKIETQKHTLNGSATKTFKLYTDESTFKFNADSEFSAKSWVNALKKEQFAAQNSENNSISLKIPLPNIIEIDDQPIVNKALTLRLRALESSQTYAIDDFMFVFMDGSGSQVKESLGEQLAILQKSGVNTLYYDIPAKKSKSSFGKETPATAEQKNNGEDSKYLNVPTSAVPSSENGKKSRFRFRERSNSWFRRAKPLEDSQVEDVEEIYKDAANDIDSSVHSTIHIHEQEDSQEQTVAWKPSHLKNFAEMWAAKPIHYRNKFIPFQKDDTYLIKETEEVSANERFRYHFKFNKEKSLISTYYTYLNRNVPVYGKIYVSNDTVCFRSLLPGSNTYMVLPLVDVETCYKEKGFRFGYFVLVIVIHGHEELFFEFSTEVARDDIERILLKLLDNIYASSAEGSNISSASLGDVQHNPDSAKLKLFEDKINAEGFEVPLMIDENPHYKTSIKPNKSYKFGLLTIGSRGDVQPYIALGKGLIKEGHQVVIITHSEFRDFVESHGIQFEEIAGNPVELMSLMVENESMNVKMLREASSKFRGWIDALLQTSWEVCNRRKFDILIESPSAMVGIHIAEALQIPYFRAFTMPWTRTRAYPHAFIVPDQKRGGNYNYLTHVLFENVFWKGISGQVNKWRVETLGLGKTNLFLLQQNNVPFLYNVSPTIFPPSIDFSEWVRVTGYWFLDDKSTFKPPAELQEFISEARSKGKKLVYIGFGSIVVSNAKEMTEALVEAVMEADVYCILNKGWSERLGDKAAKKTEVDLPRNILNIGNVPHDWLFPQVDAAVHHGGSGTTGASLRAGLPTVIKPFFGDQFFYAGRVEDIGVGIALKKLNAQTLADALKVATTNKIMKDRAGLIKKKISKEDGIKTAISAIYNELEYARSVTLSRVKTPRKKEENVDATKLTPAETTDEGWTMI',
                        'descr' => 'Sterol 3-beta-glucosyltransferase'
                      },
          'Q4X180' => {
                        'id' => 'Q4X180',
                        'seq' => 'MKSSRKRTKRRVLQDMSISGLLLSVALLPSVVSAQDHVYLDPSSSGSPYLGPQIPLTGLPALTGTHEFTLRHIYQRGTHDQPDLHRRLDIKPHTRLWAVSDDGLEKELVTFDTPLVASSSPLTIQRLADRRLSVIEGYLAAARSRGEAVALSPSEWVMDTLAGPNVTDKESVLTFAKMTANDYIEEPGSGDWHYIHGRFNYSSSFGWQSDGLRGHIYADKTNSTIVISLKGTSPALFDGAGTTTNDKINDNLFFSCCCGQGGSYLWRQVCDCQQSAFTANLTCIVEAMNDENRYYRAAIDLYSNVTDMYPDANVWLTGHSLGGAMSSLLGLTFGLPVVTFEAVPEALPAARLGLPSPPGHDPRLPQSRQYTGAYHFGHTADPVYMGTCNGVGSICTWGGYAMESACHTGQMCVYDTVEDKGWRVALSTHRIEAVISDVLEVYEDIPPCAPEEECYDCELWKFFKSNGSESTTTSTTTTTTAPTTTRTSTCKTPGWWGCLDESTTTTTTTSTTTTTTTTTTSTCKTPGWFGCKDPTTTTEATAAPSVTTSIPTPTTYPTSSTSTCKDPGWFGCRDPPSTTASITSSPSTTSTCDDPGFFWGCYDESTTATHPITSGPSAPYSTPSPTHEHTCTSSIFFGLICVGSTGTELR',
                        'descr' => 'Putative lipase atg15'
                      },
          'Q8S929' => {
                        'id' => 'Q8S929',
                        'seq' => 'MKALCDRFVPQQCSSSSKSDTHDKSPLVSDSGPSDNKSKFTLWSNVFTSSSSVSQPYRESSTSGHKQVCTTRNGWTAFVKRVSMASGAIRRFQERVLGPNRTGLPSTTSDVWLLGVCYKISADENSGETDTGTVLAALQLDFSSKILMTYRKGFEPFRDTTYTSDVNWGCMIRSSQMLFAQALLFHRLGRAWTKKSELPEQEYLETLEPFGDSEPSAFSIHNLIIAGASYGLAAGSWVGPYAICRAWESLACKKRKQTDSKNQTLPMAVHIVSGSEDGERGGAPILCIEDATKSCLEFSKGQSEWTPIILLVPLVLGLDSVNPRYIPSLVATFTFPQSVGILGGKPGASTYIVGVQEDKGFYLDPHEVQQVVTVNKETPDVDTSSYHCNVLRYVPLESLDPSLALGFYCRDKDDFDDFCLRALKLAEESNGAPLFTVTQTHTAINQSNYGFADDDSEDEREDDWQML',
                        'descr' => 'Cysteine protease ATG4a'
                      }
        };
Sterol 3-beta-glucosyltransferase
MPITQIISASDSEAGPKPSISLVPDKPSEPETSPRHHRLSRSLSKFKRWRGRSNSSLSMGSSEQQELQDSPNEARSDDDENGYNNDNADDLAKSKYMMKSIAGLLTTASVYAGMNNAQEMNVLSQVDSEESDSSDSFQENIGQNEVKSKKENLKTKSHPEVPRLDKRKPTLFDFSITREKLSKDNVAKLRQRFCLDEQEPFLNDFPAWLLKDVLVQGHIFITTKHFLFFAYLPKNPRSVKMSGNLNIRTKLIRSTRYWCVLKNHLFSMYTSSTELYFPVLTIDLREVQKIETQKHTLNGSATKTFKLYTDESTFKFNADSEFSAKSWVNALKKEQFAAQNSENNSISLKIPLPNIIEIDDQPIVNKALTLRLRALESSQTYAIDDFMFVFMDGSGSQVKESLGEQLAILQKSGVNTLYYDIPAKKSKSSFGKETPATAEQKNNGEDSKYLNVPTSAVPSSENGKKSRFRFRERSNSWFRRAKPLEDSQVEDVEEIYKDAANDIDSSVHSTIHIHEQEDSQEQTVAWKPSHLKNFAEMWAAKPIHYRNKFIPFQKDDTYLIKETEEVSANERFRYHFKFNKEKSLISTYYTYLNRNVPVYGKIYVSNDTVCFRSLLPGSNTYMVLPLVDVETCYKEKGFRFGYFVLVIVIHGHEELFFEFSTEVARDDIERILLKLLDNIYASSAEGSNISSASLGDVQHNPDSAKLKLFEDKINAEGFEVPLMIDENPHYKTSIKPNKSYKFGLLTIGSRGDVQPYIALGKGLIKEGHQVVIITHSEFRDFVESHGIQFEEIAGNPVELMSLMVENESMNVKMLREASSKFRGWIDALLQTSWEVCNRRKFDILIESPSAMVGIHIAEALQIPYFRAFTMPWTRTRAYPHAFIVPDQKRGGNYNYLTHVLFENVFWKGISGQVNKWRVETLGLGKTNLFLLQQNNVPFLYNVSPTIFPPSIDFSEWVRVTGYWFLDDKSTFKPPAELQEFISEARSKGKKLVYIGFGSIVVSNAKEMTEALVEAVMEADVYCILNKGWSERLGDKAAKKTEVDLPRNILNIGNVPHDWLFPQVDAAVHHGGSGTTGASLRAGLPTVIKPFFGDQFFYAGRVEDIGVGIALKKLNAQTLADALKVATTNKIMKDRAGLIKKKISKEDGIKTAISAIYNELEYARSVTLSRVKTPRKKEENVDATKLTPAETTDEGWTMI
#+end_example


The second solution redefines the input record separator variable, $/,
and reads the file in one sequence entry at the time. Regular
expressions are used to the max. The programme structure is much
simpler.

#+HEADERS: :results output :exports both :shebang "#!/usr/bin/env perl"
#+BEGIN_SRC perl :tangle read_fastablock.pl
  #!/usr/bin/env perl
  
  use v5.10;
  use strict;
  use warnings;
  use autodie;
  use Data::Dumper; # Data::Printer 
  my $DEBUG = 1;


  sub read_file {
      my $file = shift;

      # redefine the input record separator
      local $/ = '>';

      # create the data structure to hold sequence information
      my $seqs;

      # open the file
      open my $F, "<", $file;

      my $new_seq;
      while (<$F>) {

          # take care of the edge conditions
          next if m/^>$/;
          s/>$//;
          #say "|$_|";

          # parse ID and description
          my ($id, $descr) = $_ =~ /(\w+) (.*)/;
          say "($id, $descr)";

          # read the sequence
          my ($seq) = $_ =~  /[^\n]+(.*)/s;
          $seq =~ s/\n//g;

          # store them in a hash ref
          my $new_seq;
          $new_seq->{id} = $id;
          $new_seq->{descr} = $descr;
          $new_seq->{seq} = $seq;

          # add the sequence info into $seqs collection hash ref
          $seqs->{$id} = $new_seq;

      }
      #$seqs->{$new_seq->{id}} = $new_seq if $new_seq;
      print Dumper $seqs;
      return $seqs;
  }
  
  
  # main part of the programme
  my $file = 'seq.fasta';
  my $seqs = read_file($file);
  
  # call information from the data structure
  say $seqs->{A7A179}->{descr};
  say $seqs->{A7A179}->{seq};
  
#+END_SRC

#+RESULTS:
#+begin_example
(Q4X180, Putative lipase atg15;)
(A7A179, Sterol 3-beta-glucosyltransferase;)
(Q8S929, Cysteine protease ATG4a;)
$VAR1 = {
          'A7A179' => {
                        'id' => 'A7A179',
                        'seq' => 'MPITQIISASDSEAGPKPSISLVPDKPSEPETSPRHHRLSRSLSKFKRWRGRSNSSLSMGSSEQQELQDSPNEARSDDDENGYNNDNADDLAKSKYMMKSIAGLLTTASVYAGMNNAQEMNVLSQVDSEESDSSDSFQENIGQNEVKSKKENLKTKSHPEVPRLDKRKPTLFDFSITREKLSKDNVAKLRQRFCLDEQEPFLNDFPAWLLKDVLVQGHIFITTKHFLFFAYLPKNPRSVKMSGNLNIRTKLIRSTRYWCVLKNHLFSMYTSSTELYFPVLTIDLREVQKIETQKHTLNGSATKTFKLYTDESTFKFNADSEFSAKSWVNALKKEQFAAQNSENNSISLKIPLPNIIEIDDQPIVNKALTLRLRALESSQTYAIDDFMFVFMDGSGSQVKESLGEQLAILQKSGVNTLYYDIPAKKSKSSFGKETPATAEQKNNGEDSKYLNVPTSAVPSSENGKKSRFRFRERSNSWFRRAKPLEDSQVEDVEEIYKDAANDIDSSVHSTIHIHEQEDSQEQTVAWKPSHLKNFAEMWAAKPIHYRNKFIPFQKDDTYLIKETEEVSANERFRYHFKFNKEKSLISTYYTYLNRNVPVYGKIYVSNDTVCFRSLLPGSNTYMVLPLVDVETCYKEKGFRFGYFVLVIVIHGHEELFFEFSTEVARDDIERILLKLLDNIYASSAEGSNISSASLGDVQHNPDSAKLKLFEDKINAEGFEVPLMIDENPHYKTSIKPNKSYKFGLLTIGSRGDVQPYIALGKGLIKEGHQVVIITHSEFRDFVESHGIQFEEIAGNPVELMSLMVENESMNVKMLREASSKFRGWIDALLQTSWEVCNRRKFDILIESPSAMVGIHIAEALQIPYFRAFTMPWTRTRAYPHAFIVPDQKRGGNYNYLTHVLFENVFWKGISGQVNKWRVETLGLGKTNLFLLQQNNVPFLYNVSPTIFPPSIDFSEWVRVTGYWFLDDKSTFKPPAELQEFISEARSKGKKLVYIGFGSIVVSNAKEMTEALVEAVMEADVYCILNKGWSERLGDKAAKKTEVDLPRNILNIGNVPHDWLFPQVDAAVHHGGSGTTGASLRAGLPTVIKPFFGDQFFYAGRVEDIGVGIALKKLNAQTLADALKVATTNKIMKDRAGLIKKKISKEDGIKTAISAIYNELEYARSVTLSRVKTPRKKEENVDATKLTPAETTDEGWTMI',
                        'descr' => 'Sterol 3-beta-glucosyltransferase;'
                      },
          'Q4X180' => {
                        'id' => 'Q4X180',
                        'seq' => 'MKSSRKRTKRRVLQDMSISGLLLSVALLPSVVSAQDHVYLDPSSSGSPYLGPQIPLTGLPALTGTHEFTLRHIYQRGTHDQPDLHRRLDIKPHTRLWAVSDDGLEKELVTFDTPLVASSSPLTIQRLADRRLSVIEGYLAAARSRGEAVALSPSEWVMDTLAGPNVTDKESVLTFAKMTANDYIEEPGSGDWHYIHGRFNYSSSFGWQSDGLRGHIYADKTNSTIVISLKGTSPALFDGAGTTTNDKINDNLFFSCCCGQGGSYLWRQVCDCQQSAFTANLTCIVEAMNDENRYYRAAIDLYSNVTDMYPDANVWLTGHSLGGAMSSLLGLTFGLPVVTFEAVPEALPAARLGLPSPPGHDPRLPQSRQYTGAYHFGHTADPVYMGTCNGVGSICTWGGYAMESACHTGQMCVYDTVEDKGWRVALSTHRIEAVISDVLEVYEDIPPCAPEEECYDCELWKFFKSNGSESTTTSTTTTTTAPTTTRTSTCKTPGWWGCLDESTTTTTTTSTTTTTTTTTTSTCKTPGWFGCKDPTTTTEATAAPSVTTSIPTPTTYPTSSTSTCKDPGWFGCRDPPSTTASITSSPSTTSTCDDPGFFWGCYDESTTATHPITSGPSAPYSTPSPTHEHTCTSSIFFGLICVGSTGTELR',
                        'descr' => 'Putative lipase atg15;'
                      },
          'Q8S929' => {
                        'id' => 'Q8S929',
                        'seq' => 'MKALCDRFVPQQCSSSSKSDTHDKSPLVSDSGPSDNKSKFTLWSNVFTSSSSVSQPYRESSTSGHKQVCTTRNGWTAFVKRVSMASGAIRRFQERVLGPNRTGLPSTTSDVWLLGVCYKISADENSGETDTGTVLAALQLDFSSKILMTYRKGFEPFRDTTYTSDVNWGCMIRSSQMLFAQALLFHRLGRAWTKKSELPEQEYLETLEPFGDSEPSAFSIHNLIIAGASYGLAAGSWVGPYAICRAWESLACKKRKQTDSKNQTLPMAVHIVSGSEDGERGGAPILCIEDATKSCLEFSKGQSEWTPIILLVPLVLGLDSVNPRYIPSLVATFTFPQSVGILGGKPGASTYIVGVQEDKGFYLDPHEVQQVVTVNKETPDVDTSSYHCNVLRYVPLESLDPSLALGFYCRDKDDFDDFCLRALKLAEESNGAPLFTVTQTHTAINQSNYGFADDDSEDEREDDWQML',
                        'descr' => 'Cysteine protease ATG4a;'
                      }
        };
Sterol 3-beta-glucosyltransferase;
MPITQIISASDSEAGPKPSISLVPDKPSEPETSPRHHRLSRSLSKFKRWRGRSNSSLSMGSSEQQELQDSPNEARSDDDENGYNNDNADDLAKSKYMMKSIAGLLTTASVYAGMNNAQEMNVLSQVDSEESDSSDSFQENIGQNEVKSKKENLKTKSHPEVPRLDKRKPTLFDFSITREKLSKDNVAKLRQRFCLDEQEPFLNDFPAWLLKDVLVQGHIFITTKHFLFFAYLPKNPRSVKMSGNLNIRTKLIRSTRYWCVLKNHLFSMYTSSTELYFPVLTIDLREVQKIETQKHTLNGSATKTFKLYTDESTFKFNADSEFSAKSWVNALKKEQFAAQNSENNSISLKIPLPNIIEIDDQPIVNKALTLRLRALESSQTYAIDDFMFVFMDGSGSQVKESLGEQLAILQKSGVNTLYYDIPAKKSKSSFGKETPATAEQKNNGEDSKYLNVPTSAVPSSENGKKSRFRFRERSNSWFRRAKPLEDSQVEDVEEIYKDAANDIDSSVHSTIHIHEQEDSQEQTVAWKPSHLKNFAEMWAAKPIHYRNKFIPFQKDDTYLIKETEEVSANERFRYHFKFNKEKSLISTYYTYLNRNVPVYGKIYVSNDTVCFRSLLPGSNTYMVLPLVDVETCYKEKGFRFGYFVLVIVIHGHEELFFEFSTEVARDDIERILLKLLDNIYASSAEGSNISSASLGDVQHNPDSAKLKLFEDKINAEGFEVPLMIDENPHYKTSIKPNKSYKFGLLTIGSRGDVQPYIALGKGLIKEGHQVVIITHSEFRDFVESHGIQFEEIAGNPVELMSLMVENESMNVKMLREASSKFRGWIDALLQTSWEVCNRRKFDILIESPSAMVGIHIAEALQIPYFRAFTMPWTRTRAYPHAFIVPDQKRGGNYNYLTHVLFENVFWKGISGQVNKWRVETLGLGKTNLFLLQQNNVPFLYNVSPTIFPPSIDFSEWVRVTGYWFLDDKSTFKPPAELQEFISEARSKGKKLVYIGFGSIVVSNAKEMTEALVEAVMEADVYCILNKGWSERLGDKAAKKTEVDLPRNILNIGNVPHDWLFPQVDAAVHHGGSGTTGASLRAGLPTVIKPFFGDQFFYAGRVEDIGVGIALKKLNAQTLADALKVATTNKIMKDRAGLIKKKISKEDGIKTAISAIYNELEYARSVTLSRVKTPRKKEENVDATKLTPAETTDEGWTMI
#+end_example

